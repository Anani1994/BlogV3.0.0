(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{313:function(t,i,e){"use strict";e.r(i);var s=e(471),a=e(386);for(var n in a)"default"!==n&&function(t){e.d(i,t,function(){return a[t]})}(n);var o=e(0),r=Object(o.a)(a.default,s.a,s.b,!1,null,null,null);r.options.__file="src/views/articles/frontend/JS/JS-05.vue",i.default=r.exports},385:function(t,i,e){"use strict";Object.defineProperty(i,"__esModule",{value:!0}),i.default={data:function(){return{toTop:this.$util.toTop}}}},386:function(t,i,e){"use strict";e.r(i);var s=e(385),a=e.n(s);for(var n in s)"default"!==n&&function(t){e.d(i,t,function(){return s[t]})}(n);i.default=a.a},471:function(t,i,e){"use strict";var s=function(){var t=this,i=t.$createElement,e=t._self._c||i;return e("BoWen",[e("div",{staticClass:"p-1",attrs:{slot:"catalog"},slot:"catalog"},[e("Steps",{attrs:{direction:"vertical"}},[e("Step",{attrs:{title:"if 语句",content:"if 语句",status:"wait"},nativeOn:{click:function(i){t.toTop("#JS-05-1",30)}}}),e("Step",{attrs:{title:"do-while 语句",content:"do-while 语句",status:"wait"},nativeOn:{click:function(i){t.toTop("#JS-05-2",30)}}}),e("Step",{attrs:{title:"while 语句",content:"while 语句",status:"wait"},nativeOn:{click:function(i){t.toTop("#JS-05-3",30)}}}),e("Step",{attrs:{title:"for 语句",content:"for 语句",status:"wait"},nativeOn:{click:function(i){t.toTop("#JS-05-4",30)}}}),e("Step",{attrs:{title:"for-in 语句",content:"for-in 语句",status:"wait"},nativeOn:{click:function(i){t.toTop("#JS-05-5",30)}}}),e("Step",{attrs:{title:"label 语句",content:"label 语句",status:"wait"},nativeOn:{click:function(i){t.toTop("#JS-05-6",30)}}}),e("Step",{attrs:{title:"break 和 continue 语句 语句",content:"break 和 continue 语句 语句",status:"wait"},nativeOn:{click:function(i){t.toTop("#JS-05-7",30)}}}),e("Step",{attrs:{title:"with 语句",content:"with 语句",status:"wait"},nativeOn:{click:function(i){t.toTop("#JS-05-8",30)}}}),e("Step",{attrs:{title:"switch 语句",content:"switch 语句",status:"wait"},nativeOn:{click:function(i){t.toTop("#JS-05-9",30)}}})],1)],1),e("div",{staticClass:"px-1"},[e("div",{staticClass:"py-3 text-center"},[e("h1",[e("Icon",{attrs:{type:"ios-book-outline"}}),t._v(" JS-语句")],1),e("p",{staticClass:"pt-1"},[t._v("ECMA-262 规定了一组语句，也称为流控制语句")])]),e("h3",{staticClass:"ml-1",attrs:{id:"JS-05-1"}},[e("Icon",{attrs:{type:"logo-buffer"}}),t._v(" if 语句")],1),e("Divider"),e("p",[t._v("如右所示是 if 语句的语法："),e("pre",{staticClass:"custom-pre"},[t._v("if (condition) statement1 else statement2 ")])]),e("p",[t._v("其中的 condition（条件）可以是任意表达式；而且对这个表达式求值的结果不一定是布尔值。 ECMAScript 会自动调用 Boolean() 转换函数将这个表达式的结果转换为一个布尔值。如果对 condition 求值的结果是 true， 则执行 statement1，如果对 condition 求值的结果是 false，则执行 statement2。 ")]),e("h3",{staticClass:"ml-1",attrs:{id:"JS-05-2"}},[e("Icon",{attrs:{type:"logo-buffer"}}),t._v(" do-while 语句")],1),e("Divider"),e("p",[t._v("do-while 语句是一种后测试循环语句，即只有在循环体中的代码执行之后，才会测试出口条件。")]),e("pre",{directives:[{name:"highlight",rawName:"v-highlight"}],staticClass:"ml-2"},[e("code",{staticClass:"js"},[t._v("var i = 9;\ndo {\n    console.log(i);\n    i--;\n} while (i > 9);\n// 上面的代码会输出一次 9")])]),e("h3",{staticClass:"ml-1",attrs:{id:"JS-05-3"}},[e("Icon",{attrs:{type:"logo-buffer"}}),t._v(" while 语句")],1),e("Divider"),e("p",[t._v("while 语句属于前测试循环语句，也就是说，在循环体内的代码被执行之前，就会对出口条件求值。")]),e("pre",{directives:[{name:"highlight",rawName:"v-highlight"}],staticClass:"ml-2"},[e("code",{staticClass:"js"},[t._v("var i = 9;\nwhile (i > 9) {\n    console.log(i);\n    i--;\n}\n// 上面的代码没有输出")])]),e("h3",{staticClass:"ml-1",attrs:{id:"JS-05-4"}},[e("Icon",{attrs:{type:"logo-buffer"}}),t._v(" for 语句")],1),e("Divider"),e("p",[t._v("for 语句也是一种前测试循环语句，但它具有在执行循环之前初始化变量和定义循环后要执行的代码的能力。")]),e("p",[t._v("如右是 for 语句的语法："),e("pre",{staticClass:"custom-pre"},[t._v("for (initialization(语句 1); expression(语句 2); post-loop-expression(语句 3)) statement(执行的代码)")])]),e("p",[t._v("语句 1 （代码块）开始前执行，语句 2 定义运行循环（代码块）的条件，语句 3 在循环（代码块）已被执行之后执行。")]),e("p",{staticClass:"text-info"},[t._v("for 语句与 while 语句的功能一样，for 循环只是把与循环有关的代码集中在了一个位置。")]),e("p",{staticClass:"text-success"},[t._v("由于 ECMAScript 中不存在块级作用域，因此在循环内部定义的变量也可以在外部访问到。")]),e("p",{staticClass:"text-muted"},[t._v("for 语句中的初始化表达式、控制表达式和循环后表达式都是可选的。将这三个表达式全部省略，就会创建一个无限循环。")]),e("pre",{directives:[{name:"highlight",rawName:"v-highlight"}],staticClass:"ml-2"},[e("code",{staticClass:"js"},[t._v("for (;;) { // 无限循环\n    doSomething();\n}")])]),e("p",{staticClass:"text-muted"},[t._v("只给出控制表达式实际上就把 for 循环转换成了 while 循环。")]),e("h3",{staticClass:"ml-1",attrs:{id:"JS-05-5"}},[e("Icon",{attrs:{type:"logo-buffer"}}),t._v(" for-in 语句")],1),e("Divider"),e("p",[t._v("for-in 语句是一种精准的迭代语句，可以用来枚举对象的属性。")]),e("pre",{directives:[{name:"highlight",rawName:"v-highlight"}],staticClass:"ml-2"},[e("code",{staticClass:"js"},[t._v("for (var propName in window) {\n    document.write(propName);\n}")])]),e("p",[t._v("控制语句中的 var 操作符也不是必需的。但是，为了保证使用局部变量，我们推荐上面例子中的这种做法。")]),e("p",[t._v("ECMAScript 对象的属性没有顺序，返回的先后次序可能会因浏览器而异。")]),e("p",{staticClass:"text-muted"},[t._v("如果表示要迭代的对象的变量值为 null 或 undefined，for-in 语句会抛出错误。ECMAScript 5 更正了这一行为；对这种情况不再抛出错误，而只是不执行循环体。为了保证最大限度的兼容性，建议在使用 for-in 循环之前，先检测确认该对象的值不是 null 或 undefined。")]),e("h3",{staticClass:"ml-1",attrs:{id:"JS-05-6"}},[e("Icon",{attrs:{type:"logo-buffer"}}),t._v(" label 语句")],1),e("Divider"),e("p",[t._v("使用 label 语句可以在代码中添加标签，加标签的语句一般都 要与 for 语句等循环语句配合使用。")]),e("h3",{staticClass:"ml-1",attrs:{id:"JS-05-7"}},[e("Icon",{attrs:{type:"logo-buffer"}}),t._v(" break 和 continue 语句")],1),e("Divider"),e("p",[t._v("break 和 continue 语句用于在循环中精确地控制代码的执行。")]),e("p",[t._v("break 语句会立即退出循环， 强制继续执行循环后面的语句。")]),e("p",[t._v("continue 语句虽然也是立即退出循环，但退出循环后会从循环的顶部继续执行。")]),e("pre",{directives:[{name:"highlight",rawName:"v-highlight"}],staticClass:"ml-2"},[e("code",{staticClass:"js"},[t._v("var num = 0;\nfor (var i = 1; i < 10; i++) {\n    if (i % 5 == 0) {\n        break;\n    }\n    num++;\n}\nconsole.log(num); //4\n// 将其中的 break 换成 continue 时会输出 8")])]),e("h3",{staticClass:"ml-1",attrs:{id:"JS-05-8"}},[e("Icon",{attrs:{type:"logo-buffer"}}),t._v(" with 语句")],1),e("Divider"),e("p",[t._v("with 语句的作用是将代码的作用域设置到一个特定的对象中。")]),e("p",[t._v("with 语句的语法如右所示："),e("pre",{staticClass:"custom-pre"},[t._v("with (expression) { statement };")])]),e("pre",{directives:[{name:"highlight",rawName:"v-highlight"}],staticClass:"ml-2"},[e("code",{staticClass:"js"},[t._v("var qs = location.search.substring(1); \nvar hostName = location.hostname;\nvar url = location.href;\n// 如果使用 with 语句，可以像下面这样\nwith(location) {\n    var qs = search.substring(1);\n    var hostName = hostname;\n    var url = href;\n}")])]),e("p",{staticClass:"text-info"},[t._v("如果大量使用 with 语句会导致性能下降，同时也会给调试代码造成困难。")]),e("p",{staticClass:"text-warn"},[t._v("严格模式下不允许使用 with 语句，否则将视为语法错误。")]),e("h3",{staticClass:"ml-1",attrs:{id:"JS-05-9"}},[e("Icon",{attrs:{type:"logo-buffer"}}),t._v(" switch 语句")],1),e("Divider"),e("p",[t._v("首先设置表达式 n（通常是一个变量）。随后表达式的值会与结构中的每个 case 的值做比较。如果存在匹配，则与该 case 关联的代码块会被执行。请使用 break 来阻止代码自动地向下一个 case 运行。")]),e("p",{staticClass:"text-warn"},[t._v("如果省略 break 关键字，就会导致执行完当前 case 后，继续执行下一个 case。如果确实需要混合几种情形，最好在代码中添加注释，说明你是有意省略了 break 关键字。")]),e("p",{staticClass:"text-info"},[t._v("最后的 default 关键字则用于在表达式不匹配前面任何一种情形的时候，执行机动代码。")]),e("pre",{directives:[{name:"highlight",rawName:"v-highlight"}],staticClass:"ml-2"},[e("code",{staticClass:"js"},[t._v("switch (n) \n{\n    case 1:\n        dosomething0(); // 执行代码块 1\n        break;\n    case 2:\n        dosomething1(); // 执行代码块 2\n        break;\n    default:\n        // 与 case 1 和 case 2 不同时执行的代码\n        dosomething2();\n}")])]),e("p",[t._v("在 switch 语句中使用任何数据类型（在很多其他语言中只能使用数值），无论是字符串，还是对象。")]),e("p",[t._v("每个 case 的值不一定是常量，可以是变量，甚至是表达式。")]),e("p",{staticClass:"text-success"},[t._v("switch 语句在比较值时使用的是全等操作符，因此不会发生类型转换。")]),e("p",{staticClass:"text-right"},[t._v("参考资料：JavaScript 高级程序设计（第三版）")]),e("FooterDivider")],1)])},a=[];s._withStripped=!0,e.d(i,"a",function(){return s}),e.d(i,"b",function(){return a})}}]);
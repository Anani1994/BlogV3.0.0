(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{304:function(t,e,a){"use strict";a.r(e);var o=a(462),s=a(364);for(var n in s)"default"!==n&&function(t){a.d(e,t,function(){return s[t]})}(n);var l=a(0),r=Object(l.a)(s.default,o.a,o.b,!1,null,null,null);r.options.__file="src/views/articles/frontend/AngularJS/angular-ui-modal.vue",e.default=r.exports},363:function(t,e,a){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default={data:function(){return{toTop:this.$util.toTop,columns:[{title:"属性名",key:"key"},{title:"类型",key:"type"},{title:"描述",key:"des"},{title:"例子",key:"example"}],data:[{key:"templateUrl",type:"string",des:"表示模态框内容的模板的路径，也可以是 script 标签中定义的 id",example:'templateUrl: "/demo.html"'},{key:"template",type:"string",des:"表示模态内容的内联模板",example:'template: "<div>demo</div>"'},{key:"controller",type:"string|function|array",des:"模态框实例的控制器，可通过注入的 $modalInstance 访问模态框的内容",example:'["scope", "$modalInstance", function DemoCtrl() {}]'},{key:"resolve",type:"object",des:"用于解析传递依赖，就像是路由中的同名配置",example:"resolve:{ data: function() { return data; } }"},{key:"size",type:"string",des:"设置模态框的大小，会生成对应的 class 属性： modal-<sm|md|lg>",example:'class: "md"'},{key:"keyboard",type:"boolean",des:"能否通过 Esc 键退出模态框，默认值为 true",example:"keyboard: false"},{key:"controllerAs",type:"string",des:"作为语法的控制器的替代，与指令定义的API相匹配。还需要提供控制器选项",example:'controllerAs: "DemoCtrl as Demo"'},{key:"backdrop",type:"boolean|string",des:"boolean 表示弹出模态框时，背景是否置灰，string 类型的值只能是 static 即点击背景不能关闭模态框",example:"backdrop: false"},{key:"backdropClass",type:"string",des:"为模态框的 backdrop 添加额外的 class",example:'backdropClass: "bg-success"'},{key:"windowClass",type:"string",des:"添加额外的 class 到模态框窗口的模板",example:'windowClass: "bg-info"'},{key:"windowTemplateUrl",type:"uib/template/modal/window.html",des:"替换模态框窗口的模板",example:"暂无"}],columns2:[{title:"属性名",key:"key"},{title:"类型",key:"type"},{title:"描述",key:"des"}],data2:[{key:"close(result)",type:"function",des:"关闭模态框、传递结果的方法"},{key:"dismiss(reason)",type:"function",des:"隐藏模态框、传递原因的方法"},{key:"result",type:"promise",des:"当模态被关闭时，当模态被关闭并被拒绝时"},{key:"opened",type:"promise",des:"当模态框打开下载好模板并解析完时"}]}}}},364:function(t,e,a){"use strict";a.r(e);var o=a(363),s=a.n(o);for(var n in o)"default"!==n&&function(t){a.d(e,t,function(){return o[t]})}(n);e.default=s.a},462:function(t,e,a){"use strict";var o=function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("BoWen",[a("div",{staticClass:"p-1",attrs:{slot:"catalog"},slot:"catalog"},[a("Steps",{attrs:{direction:"vertical"}},[a("Step",{attrs:{title:"基本介绍",content:"基本介绍",status:"wait"},nativeOn:{click:function(e){t.toTop("#angular-ui-modal-1",30)}}}),a("Step",{attrs:{title:"主要方法",content:"主要方法",status:"wait"},nativeOn:{click:function(e){t.toTop("#angular-ui-modal-2",30)}}}),a("Step",{attrs:{title:"数据传递",content:"数据传递",status:"wait"},nativeOn:{click:function(e){t.toTop("#angular-ui-modal-3",30)}}}),a("Step",{attrs:{title:"实例",content:"实例",status:"wait"},nativeOn:{click:function(e){t.toTop("#angular-ui-modal-4",30)}}})],1)],1),a("div",{staticClass:"px-1"},[a("div",{staticClass:"py-3 text-center"},[a("h1",[a("Icon",{attrs:{type:"ios-book-outline"}}),t._v(" AngularJS 模态框")],1),a("p",{staticClass:"pt-1"},[t._v("$modal 是一种快速创建 AngularJS 模态框的服务")])]),a("h3",{staticClass:"ml-1",attrs:{id:"angular-ui-modal-1"}},[a("Icon",{attrs:{type:"logo-buffer"}}),t._v(" 基本介绍")],1),a("Divider"),a("p",[t._v("$modal 是一种快速创建 AngularJS 模态框的服务。创建自定义模式很简单：创建局部视图、以及它的控制器并在使用服务时引用它们。")]),a("h3",{staticClass:"ml-1",attrs:{id:"angular-ui-modal-2"}},[a("Icon",{attrs:{type:"logo-buffer"}}),t._v(" 主要方法")],1),a("Divider"),a("p",[t._v("$modal 服务只有一种方法：open(options)。options 是一个对象，其中可用选项包括：")]),a("Table",{attrs:{columns:t.columns,data:t.data}}),a("p",{staticClass:"mt-1"},[t._v("open() 方法返回模态框实例的一个实例对象，这个对象包含了下面这些属性：")]),a("Table",{attrs:{columns:t.columns2,data:t.data2}}),a("p",{staticClass:"mt-1"},[t._v("此外模态框还扩展了下面两个方法，分别同上面的 close(result)、dismiss(reason) 效果一样，$close(result)、$dismiss(reason) 不需要专门的控制器就可以用来控制模态框。")]),a("h3",{staticClass:"ml-1 mt-1",attrs:{id:"angular-ui-modal-3"}},[a("Icon",{attrs:{type:"logo-buffer"}}),t._v(" 数据传递")],1),a("Divider"),a("p",[t._v("简单的数据传递：")]),a("pre",{directives:[{name:"highlight",rawName:"v-highlight"}],staticClass:"ml-2"},[a("code",{staticClass:"js"},[t._v("angular.module('app', ['ui.bootstrap'])\n   .controller('AppCtrl', ['$scope', '$modal', function($scope, $modal) {\n       var modalInstance = $modal.open({\n           temlplateUrl: '/demo.html',\n           controller: ['$scope', '$modalInstance', ModalCtrl]\n       });\n       modalInstance.data = 'something'; // 向模态框传递数据\n       result.then(function (data) {\n           console.log('我是由 close() 触发的' + data); // 获取模态框传回来的数据\n       }, function (data) {\n           console.log('我是由 dismiss() 触发的' + data); // 获取模态框传回来的数据\n       });\n       \n       function ModalCtrl($scope, $modalInstance) {\n           $scope.data = $modalInstance.data; // 在模态框获取数据\n           $modalInstance.close('close'); // 在模态框传递数据\n           $modalInstance.dismiss('cancel'); // 在模态框传递数据\n       }\n   }]);")])]),a("p",[t._v("通过 resolve 传递：")]),a("pre",{directives:[{name:"highlight",rawName:"v-highlight"}],staticClass:"ml-2"},[a("code",{staticClass:"js"},[t._v("angular.module('app', ['ui.bootstrap'])\n   .controller('AppCtrl', ['$scope', '$modal', function($scope, $modal) {\n       $scope.todos = ['study html', 'study css', 'study javascript'];\n       var modalInstance = $modal.open({\n           temlplateUrl: '/demo.html',\n           controller: ['$scope', ModalCtrl],\n           // 向模态框传递的数据\n           resolve: {\n               resolveData: function() {\n                   return $scope.todos;\n               }\n           }\n       });\n       function ModalCtrl($scope, resolveData) {\n           $scope.data = resolveData; // 在模态框获取数据\n       }\n   }]);")])]),a("p",[t._v("通过 $scope 传递：")]),a("pre",{directives:[{name:"highlight",rawName:"v-highlight"}],staticClass:"ml-2"},[a("code",{staticClass:"js"},[t._v("angular.module('app', ['ui.bootstrap'])\n   .controller('AppCtrl', ['$rootScope' ,'$scope', '$modal', function($scope, $modal) {\n       // 要初始化一个控制器实例，需要使用$new()方法从$rootScope创建某作用域的一个新实例\n       // 这个实例会建立 Angular 在运行时使用的作用域继承\n       // 有了这个作用域，就可以初始化一个新的控制器，把这个作用域作为控制器的 $scope 传递过去\n       var scope = $rootScope.$new();\n       scope.todos = ['study html', 'study css', 'study javascript'];\n       var modalInstance = $modal.open({\n           temlplateUrl: '/demo.html',\n           controller: ['$scope', ModalCtrl],\n           // 向模态框传递的数据\n           scope: scope\n       });\n       function ModalCtrl($scope) {\n           console.log($scope.todos); // 在模态框获取数据\n       }\n   }]);")])]),a("h3",{staticClass:"ml-1",attrs:{id:"angular-ui-modal-4"}},[a("Icon",{attrs:{type:"logo-buffer"}}),t._v(" 实例")],1),a("Divider"),a("p",[t._v("参考 demo 点击 "),a("a",{attrs:{href:"http://next.plnkr.co/edit/?p=preview&preview"}},[t._v("http://next.plnkr.co/edit/?p=preview&preview")]),t._v(" 查看。")]),a("p",{staticClass:"text-right"},[t._v("参考资料："),a("a",{attrs:{href:"http://angular-ui.github.io/bootstrap/versioned-docs/0.12.0/"}},[t._v("http://angular-ui.github.io/bootstrap/versioned-docs/0.12.0/")])]),a("FooterDivider")],1)])},s=[];o._withStripped=!0,a.d(e,"a",function(){return o}),a.d(e,"b",function(){return s})}}]);